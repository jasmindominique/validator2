{"version":3,"sources":["validator.js"],"names":["Validator","parameters","console","log","options","Object","assign","selector","errorMessage","error","elements","document","querySelectorAll","warn","i","length","addEventListener","touched","evt","validate","event","isValid","$el","target","classList","add","parentElement","querySelector","innerHTML","style","backgroundColor","remove"],"mappings":";;;;;;;;;;IAAMA,S;AAOF,qBAAYC,UAAZ,EAAwB;AAAA;;AAAA;;AAAA,qCALd,IAKc;;AAAA,qCAJd,KAIc;;AAAA,qCAFd,EAEc;;AAAA,wCAgEX,YAAM;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH,KAlEuB;;AACpBD,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,UAA3B;AACA,SAAKG,OAAL,GAAeC,MAAM,CAACC,MAAP,CAAc,EAAd,EACX;AACIC,MAAAA,QAAQ,EAAE,IADd;AAEIC,MAAAA,YAAY,EAAE;AAFlB,KADW,EAKXP,UALW,CAAf;AAOA,QAAMM,QAAQ,GAAG,KAAKH,OAAL,CAAaG,QAA9B;;AACA,QAAI,CAACA,QAAL,EAAe;AACXL,MAAAA,OAAO,CAACO,KAAR,CAAc,8BAAd,EADW,CACmC;AAC9C;AACH;;AAEDP,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCI,QAAvC;AACA,QAAMG,QAAQ,GAAGC,QAAQ,CAACC,gBAAT,CAA0BL,QAA1B,CAAjB,CAhBoB,CAkBpB;AACA;;AACA,QAAI,CAACG,QAAL,EAAe;AACXR,MAAAA,OAAO,CAACW,IAAR,CAAa,+CAAb,EAA8DN,QAA9D;AACA;AACH,KAvBmB,CAyBpB;AACA;AACA;AACA;;;AAEA,SAAI,IAAIO,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACJ,QAAQ,CAACK,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjCJ,MAAAA,QAAQ,CAACI,CAAD,CAAR,CAAYE,gBAAZ,CAA6B,OAA7B,EAAsC,YAAM;AACxC,QAAA,KAAI,CAACC,OAAL,GAAe,IAAf;AACH,OAFD,EADiC,CAIjC;AACA;AACA;;AACAP,MAAAA,QAAQ,CAACI,CAAD,CAAR,CAAYE,gBAAZ,CAA6B,MAA7B,EAAqC,UAACE,GAAD;AAAA,eAAS,KAAI,CAACC,QAAL,CAAcD,GAAd,CAAT;AAAA,OAArC;AACH;AACJ;;;;6BAEQE,K,EAAO;AACZlB,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;;;mCAEciB,K,EAAO;AAClBlB,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH;;;kCAEaiB,K,EAAO;AACjBlB,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkD,KAAKkB,OAAvD;AACA,UAAMC,GAAG,GAAGF,KAAK,CAACG,MAAlB;;AACA,UAAI,CAAC,KAAKF,OAAV,EAAmB;AACfC,QAAAA,GAAG,CAACE,SAAJ,CAAcC,GAAd,CAAkB,SAAlB;AACAH,QAAAA,GAAG,CAACI,aAAJ,CAAkBC,aAAlB,CAAgC,gBAAhC,EAAkDC,SAAlD,GAA8D,KAAKxB,OAAL,CAAaI,YAA3E;AACAc,QAAAA,GAAG,CAACO,KAAJ,CAAUC,eAAV,GAA4B,KAA5B;AACH,OAJD,MAIO;AACHR,QAAAA,GAAG,CAACE,SAAJ,CAAcO,MAAd,CAAqB,SAArB;AACAT,QAAAA,GAAG,CAACI,aAAJ,CAAkBC,aAAlB,CAAgC,gBAAhC,EAAkDC,SAAlD,GAA8D,EAA9D;AACAN,QAAAA,GAAG,CAACO,KAAJ,CAAUC,eAAV,GAA4B,EAA5B;AAEH;AACJ","sourcesContent":["class Validator {\n\n    isValid = true\n    touched = false\n    \n    options = {}\n\n    constructor(parameters) {\n        console.log('Validator()', parameters)\n        this.options = Object.assign({},\n            {\n                selector: null,\n                errorMessage: 'Invalid value'\n            },\n            parameters\n        )\n        const selector = this.options.selector\n        if (!selector) {\n            console.error(\"Must provide a selector key!\") // this is a soft error, like a slap on the wrist\n            // throw new Error(\"Must provide a selector key!\") // this blows up the whole app\n        }\n\n        console.log('setting up listener for', selector)\n        const elements = document.querySelectorAll(selector)\n\n        // two ways to handle this part\n        // 1: my preferred way\n        if (!elements) {\n            console.warn(\"No elements matching the selector were found!\", selector)\n            return\n        }\n\n        // 2: but this is fine too, just a little clunkier\n        // if (element) {\n        //     // do the setup here\n        // }\n    \n        for(var i=0; i<elements.length; i++) {\n            elements[i].addEventListener('focus', () => {\n                this.touched = true\n            })\n            // this sets the wrong scope for 'this' in the child class\n            // elements[i].addEventListener('blur', this.validate)\n            // so use this syntax instead\n            elements[i].addEventListener('blur', (evt) => this.validate(evt))\n        }\n    }\n\n    validate(event) {\n        console.log('Validator.validate()')\n    }\n\n    validateBefore(event) {\n        console.log('Validator.validateBefore()')\n    }\n\n    validateAfter(event) {\n        console.log('Validator.validateAfter() isValid?', this.isValid)\n        const $el = event.target\n        if (!this.isValid) {\n            $el.classList.add('invalid')\n            $el.parentElement.querySelector('.error-message').innerHTML = this.options.errorMessage\n            $el.style.backgroundColor = \"red\"\n        } else {\n            $el.classList.remove('invalid')\n            $el.parentElement.querySelector('.error-message').innerHTML = ''\n            $el.style.backgroundColor = '';\n\n        }\n    }\n\n    showErrors = () => {\n        console.log('showing errors')\n    }\n}\n"],"file":"validator.js"}